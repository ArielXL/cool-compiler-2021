
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROBA CASE CCUR CLASS COLON COMMA CPAR DIV DOT ELSE EQUAL ESAC FALSE FI ID IF IN INHERITS ISVOID LARROW LESS LESSEQ LET LOOP MINUS NEW NOT NOX NUM OCUR OF OPAR PLUS POOL RARROW SEMICOLON STAR STRING THEN TRUE TYPE WHILE\n            program : class_list\n        \n            epsilon :\n        \n            class_list : def_class class_list \n                       | def_class\n        \n            class_list : error class_list\n        \n            def_class : CLASS TYPE OCUR feature_list CCUR SEMICOLON\n                      | CLASS TYPE INHERITS TYPE OCUR feature_list CCUR SEMICOLON\n        \n            def_class : CLASS error OCUR feature_list CCUR SEMICOLON \n                      | CLASS TYPE OCUR feature_list CCUR error   \n                      | CLASS error INHERITS TYPE OCUR feature_list CCUR SEMICOLON\n                      | CLASS error INHERITS error OCUR feature_list CCUR SEMICOLON\n                      | CLASS TYPE INHERITS error OCUR feature_list CCUR SEMICOLON\n                      | CLASS TYPE INHERITS TYPE OCUR feature_list CCUR error\n        \n            feature_list : epsilon\n                         | def_attr SEMICOLON feature_list\n                         | def_func SEMICOLON feature_list\n        \n            feature_list : error feature_list\n        \n            def_attr : ID COLON TYPE\n                     | ID COLON TYPE LARROW expr\n        \n            def_attr : error COLON TYPE\n                     | ID COLON error\n                     | error COLON TYPE LARROW expr\n                     | ID COLON error LARROW expr\n                     | ID COLON TYPE LARROW error\n        \n            def_func : ID OPAR formals CPAR COLON TYPE OCUR expr CCUR\n        \n            def_func : error OPAR formals CPAR COLON TYPE OCUR expr CCUR\n                     | ID OPAR error CPAR COLON TYPE OCUR expr CCUR\n                     | ID OPAR formals CPAR COLON error OCUR expr CCUR\n                     | ID OPAR formals CPAR COLON TYPE OCUR error CCUR\n        \n            formals  : param_list\n                     | param_list_empty\n        \n            param_list : param\n                       | param COMMA param_list\n        \n            param_list_empty : epsilon\n        \n            param : ID COLON TYPE\n        \n            let_list : let_assign\n                     | let_assign COMMA let_list\n        \n            let_assign : param LARROW expr\n                       | param\n        \n            cases_list : casep SEMICOLON\n                       | casep SEMICOLON cases_list\n        \n            cases_list : error cases_list\n                       | error SEMICOLON\n        \n            casep : ID COLON TYPE RARROW expr\n        \n            expr : ID LARROW expr\n                 | comp\n        \n            comp : comp LESS op\n                 | comp LESSEQ op\n                 | comp EQUAL op\n                 | op\n        \n            op : op PLUS term\n               | op MINUS term\n               | term\n        \n            term : term STAR base_call\n                 | term DIV base_call\n                 | base_call\n        \n            term : term STAR error\n                 | term DIV error\n        \n            base_call : factor ARROBA TYPE DOT func_call\n                      | factor\n        \n            base_call : error ARROBA TYPE DOT func_call\n                      | factor ARROBA error DOT func_call\n        \n            factor : atom\n                   | OPAR expr CPAR\n        \n            factor : factor DOT func_call\n                   | NOT expr\n                   | func_call\n        \n            factor : ISVOID base_call\n                   | NOX base_call\n        \n            factor : LET let_list IN expr\n        \n            factor : CASE expr OF cases_list ESAC\n        \n            factor : IF expr THEN expr ELSE expr FI\n        \n            factor : WHILE expr LOOP expr POOL\n        \n            atom : NUM\n        \n            atom : ID\n        \n            atom : NEW TYPE\n        \n            atom : OCUR block CCUR\n        \n            atom : error block CCUR\n                 | OCUR error CCUR\n                 | OCUR block error\n        \n            atom : TRUE\n                 | FALSE\n        \n            atom : STRING\n        \n            block : expr SEMICOLON\n                  | expr SEMICOLON block\n        \n            block : error block\n                  | error SEMICOLON\n        \n            func_call : ID OPAR args CPAR\n        \n            func_call : ID OPAR error CPAR\n                      | error OPAR args CPAR\n        \n            args : arg_list\n                 | arg_list_empty\n        \n            arg_list : expr  \n                     | expr COMMA arg_list\n        \n            arg_list : error arg_list\n        \n            arg_list_empty : epsilon\n        '
    
_lr_action_items = {'error':([0,3,4,5,10,11,12,13,15,25,29,30,31,32,33,34,36,37,38,39,55,58,62,63,66,70,80,81,82,83,85,86,87,90,98,100,102,103,104,105,106,107,110,112,113,114,115,116,117,118,119,120,121,122,135,136,141,142,145,151,154,162,164,171,173,174,175,176,180,181,182,183,184,185,189,190,193,194,195,201,207,215,219,229,],[4,4,4,9,15,21,15,23,15,39,15,15,50,52,15,15,15,15,-6,-9,-8,70,98,70,103,107,70,70,70,70,70,70,70,136,107,139,-7,-13,-12,-11,-10,107,145,70,154,70,70,70,70,70,162,164,166,169,178,107,-86,-87,185,107,185,107,107,70,70,201,70,70,70,207,70,70,169,185,145,-85,169,169,145,201,107,201,70,70,]),'CLASS':([0,3,4,38,39,55,102,103,104,105,106,],[5,5,5,-6,-9,-8,-7,-13,-12,-11,-10,]),'$end':([1,2,3,6,7,38,39,55,102,103,104,105,106,],[0,-1,-4,-3,-5,-6,-9,-8,-7,-13,-12,-11,-10,]),'TYPE':([5,11,13,27,31,61,89,94,100,101,108,121,218,],[8,20,24,40,49,96,134,137,138,140,143,165,227,]),'OCUR':([8,9,20,21,23,24,58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,137,138,139,140,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[10,12,33,34,36,37,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,180,181,182,183,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'INHERITS':([8,9,],[11,13,]),'CCUR':([10,12,14,15,16,22,26,29,30,33,34,36,37,47,48,53,54,56,57,72,73,74,75,76,77,78,79,88,91,92,93,109,124,125,126,127,134,135,136,141,142,144,151,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,190,191,192,196,205,206,207,208,209,210,212,213,214,220,230,],[-2,-2,25,-2,-14,35,-17,-2,-2,-2,-2,-2,-2,-15,-16,66,67,68,69,-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,144,-66,-68,-75,-69,-76,177,179,144,-87,-78,-84,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-85,-88,-89,-70,221,222,223,224,225,-61,-59,-62,-71,-73,-72,]),'ID':([10,12,15,28,29,30,32,33,34,36,37,58,60,62,63,70,80,81,82,83,84,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,122,136,145,151,154,162,164,171,172,173,174,175,176,180,181,182,183,184,185,189,193,194,195,201,207,215,219,229,],[19,19,19,46,19,19,46,19,19,19,19,72,46,72,72,72,72,72,126,126,46,72,72,72,72,72,72,72,72,72,126,126,126,126,126,126,126,168,72,72,72,72,72,72,72,46,72,202,72,72,72,72,72,72,168,72,72,168,168,72,202,72,202,72,72,]),'COLON':([15,19,46,59,64,65,202,],[27,31,61,94,100,101,218,]),'OPAR':([15,19,58,62,63,70,72,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,126,136,145,151,154,162,164,168,169,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[28,32,80,80,80,110,113,80,80,80,80,80,80,80,80,110,110,80,80,80,80,80,80,80,80,80,80,113,110,110,80,110,110,110,113,195,80,80,80,80,80,80,80,80,110,80,80,110,80,80,]),'SEMICOLON':([17,18,25,35,40,49,50,66,67,68,69,71,72,73,74,75,76,77,78,79,88,91,92,93,97,98,99,107,111,124,125,126,127,134,136,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,185,187,188,191,192,196,200,201,210,212,213,214,220,221,222,223,224,225,230,231,],[29,30,38,55,-20,-18,-21,102,104,105,106,-22,-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-19,-24,-23,142,151,-66,-68,-75,-69,-76,142,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,142,151,-90,-88,-89,-70,215,217,-61,-59,-62,-71,-73,-26,-25,-29,-28,-27,-72,-44,]),'CPAR':([28,32,41,42,43,44,45,51,52,72,73,74,75,76,77,78,79,88,91,92,93,95,96,110,113,123,124,125,126,127,134,144,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,163,164,167,170,177,178,179,186,187,188,191,192,195,196,210,211,212,213,214,220,230,],[-2,-2,59,-30,-31,-32,-34,64,65,-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-33,-35,-2,-2,170,-66,-68,-75,-69,-76,-78,188,170,-91,-92,-96,-45,191,192,-93,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-95,-93,-90,-88,-89,-2,-70,-61,-94,-59,-62,-71,-73,-72,]),'LARROW':([40,49,50,72,96,130,],[58,62,63,112,-35,173,]),'COMMA':([44,72,73,74,75,76,77,78,79,88,91,92,93,96,124,125,126,127,129,130,134,144,147,152,155,156,157,158,159,160,161,162,163,164,167,170,177,178,179,187,188,191,192,196,198,210,212,213,214,220,230,],[60,-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-35,-66,-68,-75,-69,172,-39,-76,-78,189,-45,189,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,189,-90,-88,-89,-70,-38,-61,-59,-62,-71,-73,-72,]),'NOT':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'ISVOID':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'NOX':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'LET':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'CASE':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'IF':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'WHILE':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'NUM':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'NEW':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'TRUE':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'FALSE':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'STRING':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'ARROBA':([70,72,73,74,75,76,77,78,79,88,91,92,93,98,107,124,125,126,127,134,136,144,145,152,154,156,157,158,159,160,161,162,163,164,167,170,177,178,179,185,188,191,192,196,207,210,212,213,214,220,230,],[108,-75,-46,-50,-53,-56,121,-67,-63,-74,-81,-82,-83,108,108,-66,-68,-75,-69,-76,108,-78,108,-45,108,-47,-48,-49,-51,-52,-54,108,-55,108,-65,-64,-77,-80,-79,108,-90,-88,-89,-70,108,-61,-59,-62,-71,-73,-72,]),'DOT':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,143,144,152,156,157,158,159,160,161,162,163,164,165,166,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,-46,-50,-53,-56,122,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,184,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,193,194,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'STAR':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,-46,-50,119,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,-78,-45,-47,-48,-49,119,119,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'DIV':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,-46,-50,120,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,-78,-45,-47,-48,-49,120,120,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'PLUS':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,-46,117,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,-78,-45,117,117,117,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'MINUS':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,-46,118,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,-78,-45,118,118,118,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'LESS':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,114,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'LESSEQ':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,115,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'EQUAL':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,116,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'OF':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,131,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,174,-76,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'THEN':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,132,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,175,-76,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'LOOP':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,133,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,230,],[-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,176,-76,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,-72,]),'IN':([72,73,74,75,76,77,78,79,88,91,92,93,96,124,125,126,127,128,129,130,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,197,198,210,212,213,214,220,230,],[-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-35,-66,-68,-75,-69,171,-36,-39,-76,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-37,-38,-61,-59,-62,-71,-73,-72,]),'ELSE':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,203,210,212,213,214,220,230,],[-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,219,-61,-59,-62,-71,-73,-72,]),'POOL':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,204,210,212,213,214,220,230,],[-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,220,-61,-59,-62,-71,-73,-72,]),'FI':([72,73,74,75,76,77,78,79,88,91,92,93,124,125,126,127,134,144,152,156,157,158,159,160,161,162,163,164,167,170,177,178,179,188,191,192,196,210,212,213,214,220,228,230,],[-75,-46,-50,-53,-56,-60,-67,-63,-74,-81,-82,-83,-66,-68,-75,-69,-76,-78,-45,-47,-48,-49,-51,-52,-54,-57,-55,-58,-65,-64,-77,-80,-79,-90,-88,-89,-70,-61,-59,-62,-71,-73,230,-72,]),'ESAC':([199,215,216,217,226,],[214,-40,-42,-43,-41,]),'RARROW':([227,],[229,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,3,4,],[2,6,7,]),'def_class':([0,3,4,],[3,3,3,]),'feature_list':([10,12,15,29,30,33,34,36,37,],[14,22,26,47,48,53,54,56,57,]),'epsilon':([10,12,15,28,29,30,32,33,34,36,37,110,113,195,],[16,16,16,45,16,16,45,16,16,16,16,150,150,150,]),'def_attr':([10,12,15,29,30,33,34,36,37,],[17,17,17,17,17,17,17,17,17,]),'def_func':([10,12,15,29,30,33,34,36,37,],[18,18,18,18,18,18,18,18,18,]),'formals':([28,32,],[41,51,]),'param_list':([28,32,60,],[42,42,95,]),'param_list_empty':([28,32,],[43,43,]),'param':([28,32,60,84,172,],[44,44,44,130,130,]),'expr':([58,62,63,70,80,81,85,86,87,90,98,107,110,112,113,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[71,97,99,111,123,124,131,132,133,111,111,111,147,152,155,111,187,111,187,111,111,196,198,203,204,205,206,208,209,187,155,155,111,228,231,]),'comp':([58,62,63,70,80,81,85,86,87,90,98,107,110,112,113,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'op':([58,62,63,70,80,81,85,86,87,90,98,107,110,112,113,114,115,116,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,156,157,158,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'term':([58,62,63,70,80,81,85,86,87,90,98,107,110,112,113,114,115,116,117,118,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,159,160,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'base_call':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[76,76,76,76,76,76,125,127,76,76,76,76,76,76,76,76,76,76,76,76,76,76,161,163,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'factor':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'func_call':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,122,136,145,151,154,162,164,171,173,175,176,180,181,182,183,184,185,189,193,194,195,207,219,229,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,167,78,78,78,78,78,78,78,78,78,78,78,78,78,78,210,78,78,212,213,78,78,78,78,]),'atom':([58,62,63,70,80,81,82,83,85,86,87,90,98,107,110,112,113,114,115,116,117,118,119,120,136,145,151,154,162,164,171,173,175,176,180,181,182,183,185,189,195,207,219,229,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'block':([70,90,98,107,136,145,151,154,162,164,185,207,],[109,135,109,141,141,109,190,109,109,109,141,109,]),'let_list':([84,172,],[128,197,]),'let_assign':([84,172,],[129,129,]),'args':([110,113,195,],[146,153,146,]),'arg_list':([110,113,145,154,185,189,195,],[148,148,186,186,186,211,148,]),'arg_list_empty':([110,113,195,],[149,149,149,]),'cases_list':([174,201,215,],[199,216,226,]),'casep':([174,201,215,],[200,200,200,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',25),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',31),
  ('class_list -> def_class class_list','class_list',2,'p_class_list','parser.py',37),
  ('class_list -> def_class','class_list',1,'p_class_list','parser.py',38),
  ('class_list -> error class_list','class_list',2,'p_class_list_error','parser.py',44),
  ('def_class -> CLASS TYPE OCUR feature_list CCUR SEMICOLON','def_class',6,'p_def_class','parser.py',50),
  ('def_class -> CLASS TYPE INHERITS TYPE OCUR feature_list CCUR SEMICOLON','def_class',8,'p_def_class','parser.py',51),
  ('def_class -> CLASS error OCUR feature_list CCUR SEMICOLON','def_class',6,'p_def_class_error','parser.py',60),
  ('def_class -> CLASS TYPE OCUR feature_list CCUR error','def_class',6,'p_def_class_error','parser.py',61),
  ('def_class -> CLASS error INHERITS TYPE OCUR feature_list CCUR SEMICOLON','def_class',8,'p_def_class_error','parser.py',62),
  ('def_class -> CLASS error INHERITS error OCUR feature_list CCUR SEMICOLON','def_class',8,'p_def_class_error','parser.py',63),
  ('def_class -> CLASS TYPE INHERITS error OCUR feature_list CCUR SEMICOLON','def_class',8,'p_def_class_error','parser.py',64),
  ('def_class -> CLASS TYPE INHERITS TYPE OCUR feature_list CCUR error','def_class',8,'p_def_class_error','parser.py',65),
  ('feature_list -> epsilon','feature_list',1,'p_feature_list','parser.py',71),
  ('feature_list -> def_attr SEMICOLON feature_list','feature_list',3,'p_feature_list','parser.py',72),
  ('feature_list -> def_func SEMICOLON feature_list','feature_list',3,'p_feature_list','parser.py',73),
  ('feature_list -> error feature_list','feature_list',2,'p_feature_list_error','parser.py',79),
  ('def_attr -> ID COLON TYPE','def_attr',3,'p_def_attr','parser.py',85),
  ('def_attr -> ID COLON TYPE LARROW expr','def_attr',5,'p_def_attr','parser.py',86),
  ('def_attr -> error COLON TYPE','def_attr',3,'p_def_attr_error','parser.py',95),
  ('def_attr -> ID COLON error','def_attr',3,'p_def_attr_error','parser.py',96),
  ('def_attr -> error COLON TYPE LARROW expr','def_attr',5,'p_def_attr_error','parser.py',97),
  ('def_attr -> ID COLON error LARROW expr','def_attr',5,'p_def_attr_error','parser.py',98),
  ('def_attr -> ID COLON TYPE LARROW error','def_attr',5,'p_def_attr_error','parser.py',99),
  ('def_func -> ID OPAR formals CPAR COLON TYPE OCUR expr CCUR','def_func',9,'p_def_func','parser.py',105),
  ('def_func -> error OPAR formals CPAR COLON TYPE OCUR expr CCUR','def_func',9,'p_def_func_error','parser.py',111),
  ('def_func -> ID OPAR error CPAR COLON TYPE OCUR expr CCUR','def_func',9,'p_def_func_error','parser.py',112),
  ('def_func -> ID OPAR formals CPAR COLON error OCUR expr CCUR','def_func',9,'p_def_func_error','parser.py',113),
  ('def_func -> ID OPAR formals CPAR COLON TYPE OCUR error CCUR','def_func',9,'p_def_func_error','parser.py',114),
  ('formals -> param_list','formals',1,'p_formals','parser.py',120),
  ('formals -> param_list_empty','formals',1,'p_formals','parser.py',121),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',127),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',128),
  ('param_list_empty -> epsilon','param_list_empty',1,'p_param_list_empty','parser.py',134),
  ('param -> ID COLON TYPE','param',3,'p_param','parser.py',140),
  ('let_list -> let_assign','let_list',1,'p_let_list','parser.py',146),
  ('let_list -> let_assign COMMA let_list','let_list',3,'p_let_list','parser.py',147),
  ('let_assign -> param LARROW expr','let_assign',3,'p_let_assign','parser.py',153),
  ('let_assign -> param','let_assign',1,'p_let_assign','parser.py',154),
  ('cases_list -> casep SEMICOLON','cases_list',2,'p_cases_list','parser.py',163),
  ('cases_list -> casep SEMICOLON cases_list','cases_list',3,'p_cases_list','parser.py',164),
  ('cases_list -> error cases_list','cases_list',2,'p_cases_list_error','parser.py',170),
  ('cases_list -> error SEMICOLON','cases_list',2,'p_cases_list_error','parser.py',171),
  ('casep -> ID COLON TYPE RARROW expr','casep',5,'p_case','parser.py',177),
  ('expr -> ID LARROW expr','expr',3,'p_expr','parser.py',183),
  ('expr -> comp','expr',1,'p_expr','parser.py',184),
  ('comp -> comp LESS op','comp',3,'p_comp','parser.py',193),
  ('comp -> comp LESSEQ op','comp',3,'p_comp','parser.py',194),
  ('comp -> comp EQUAL op','comp',3,'p_comp','parser.py',195),
  ('comp -> op','comp',1,'p_comp','parser.py',196),
  ('op -> op PLUS term','op',3,'p_op','parser.py',209),
  ('op -> op MINUS term','op',3,'p_op','parser.py',210),
  ('op -> term','op',1,'p_op','parser.py',211),
  ('term -> term STAR base_call','term',3,'p_term','parser.py',222),
  ('term -> term DIV base_call','term',3,'p_term','parser.py',223),
  ('term -> base_call','term',1,'p_term','parser.py',224),
  ('term -> term STAR error','term',3,'p_term_error','parser.py',235),
  ('term -> term DIV error','term',3,'p_term_error','parser.py',236),
  ('base_call -> factor ARROBA TYPE DOT func_call','base_call',5,'p_base_call','parser.py',242),
  ('base_call -> factor','base_call',1,'p_base_call','parser.py',243),
  ('base_call -> error ARROBA TYPE DOT func_call','base_call',5,'p_base_call_error','parser.py',252),
  ('base_call -> factor ARROBA error DOT func_call','base_call',5,'p_base_call_error','parser.py',253),
  ('factor -> atom','factor',1,'p_factor1','parser.py',259),
  ('factor -> OPAR expr CPAR','factor',3,'p_factor1','parser.py',260),
  ('factor -> factor DOT func_call','factor',3,'p_factor2','parser.py',266),
  ('factor -> NOT expr','factor',2,'p_factor2','parser.py',267),
  ('factor -> func_call','factor',1,'p_factor2','parser.py',268),
  ('factor -> ISVOID base_call','factor',2,'p_factor3','parser.py',279),
  ('factor -> NOX base_call','factor',2,'p_factor3','parser.py',280),
  ('factor -> LET let_list IN expr','factor',4,'p_expr_let','parser.py',289),
  ('factor -> CASE expr OF cases_list ESAC','factor',5,'p_expr_case','parser.py',295),
  ('factor -> IF expr THEN expr ELSE expr FI','factor',7,'p_expr_if','parser.py',301),
  ('factor -> WHILE expr LOOP expr POOL','factor',5,'p_expr_while','parser.py',307),
  ('atom -> NUM','atom',1,'p_atom_num','parser.py',313),
  ('atom -> ID','atom',1,'p_atom_id','parser.py',319),
  ('atom -> NEW TYPE','atom',2,'p_atom_new','parser.py',325),
  ('atom -> OCUR block CCUR','atom',3,'p_atom_block','parser.py',331),
  ('atom -> error block CCUR','atom',3,'p_atom_block_error','parser.py',337),
  ('atom -> OCUR error CCUR','atom',3,'p_atom_block_error','parser.py',338),
  ('atom -> OCUR block error','atom',3,'p_atom_block_error','parser.py',339),
  ('atom -> TRUE','atom',1,'p_atom_boolean','parser.py',345),
  ('atom -> FALSE','atom',1,'p_atom_boolean','parser.py',346),
  ('atom -> STRING','atom',1,'p_atom_string','parser.py',352),
  ('block -> expr SEMICOLON','block',2,'p_block','parser.py',358),
  ('block -> expr SEMICOLON block','block',3,'p_block','parser.py',359),
  ('block -> error block','block',2,'p_block_error','parser.py',365),
  ('block -> error SEMICOLON','block',2,'p_block_error','parser.py',366),
  ('func_call -> ID OPAR args CPAR','func_call',4,'p_func_call','parser.py',372),
  ('func_call -> ID OPAR error CPAR','func_call',4,'p_func_call_error','parser.py',378),
  ('func_call -> error OPAR args CPAR','func_call',4,'p_func_call_error','parser.py',379),
  ('args -> arg_list','args',1,'p_args','parser.py',385),
  ('args -> arg_list_empty','args',1,'p_args','parser.py',386),
  ('arg_list -> expr','arg_list',1,'p_arg_list','parser.py',392),
  ('arg_list -> expr COMMA arg_list','arg_list',3,'p_arg_list','parser.py',393),
  ('arg_list -> error arg_list','arg_list',2,'p_arg_list_error','parser.py',402),
  ('arg_list_empty -> epsilon','arg_list_empty',1,'p_arg_list_empty','parser.py',408),
]
